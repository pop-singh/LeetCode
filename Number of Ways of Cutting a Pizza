class Solution {

    private final static int MOD = 1_000_000_007;
    private int rows, cols;
    
    public int ways(String[] pizza, int k) {

        this.rows = pizza.length;
        this.cols = pizza[0].length();
        long[][][] memo = new long[rows][cols][k + 1];
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                Arrays.fill(memo[i][j], -1l);
            }
        }

        
        // byte[i][j] represents if the 'row' row has an apple and the 'col' col has an apple
        // 0: nothing for 'row' and 'col'
        // 1: row only
        // 2: col only
        // 3: row + col
        byte[][] isApple = new byte[rows + 1][cols + 1]; 
        for (int i = rows - 1; i >= 0; --i) {
            for (int j = cols - 1; j >= 0; --j) {
                if (pizza[i].charAt(j) == 'A') {
                    isApple[i][j] = 3;
                } else {
                    // there is at least an apple on the current row
                    if (isApple[i][j + 1] % 2 == 1) {
                        isApple[i][j] = 1;
                    }
                    // there is at least an apple on the current column
                    if (isApple[i + 1][j] >= 2) {
                        isApple[i][j] += 2;
                    }
                }
            }
        }
        
        return (int) ways(pizza, 0, 0, k, isApple, memo);
    }
    private long ways(String[] pizza, int row, int col, int k, byte[][] isApple, long[][][] memo) {
        // if the current row, col, and cut k has already been calculated before
        // no need to calculate again, just return the recorded value
        if (memo[row][col][k] != -1) return memo[row][col][k];

        // corner case
        if (k == 1) {
            int ub = Math.min(rows - row, cols - col) - 1;
            for (int i = 0; i <= ub; ++i) {
                if (isApple[row + i][col + i] > 0) return 1;
            }
            return 0;
        }

        // horizontally cut
        long ans = 0l;
        boolean colExist = false;
        for (int i = 1; row + i < rows; ++i) {
            if (colExist || isApple[row + i - 1][col] % 2 == 1) {
                colExist = true;
                ans = ans + ways(pizza, row + i, col, k - 1, isApple, memo);
            }
        }
        // vertically cut
        boolean rowExist = false;
        for (int i = 1; col + i < cols; ++i) {
            if (rowExist || isApple[row][col + i - 1] >= 2) {
                rowExist = true;
                ans = ans + ways(pizza, row, col + i, k - 1, isApple, memo);
            }
        }

        // record the calculation and return its value at the same time
        return memo[row][col][k] = ans % MOD;
    }
}
